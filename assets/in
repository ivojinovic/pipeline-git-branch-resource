#!/bin/sh
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

destination=$1
if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/git-resource-request.XXXXXX)
cat > $payload <&0
load_pubkey $payload
configure_git_ssl_verification $payload
configure_credentials $payload

#old_branch_list=$(jq -r '.version.ref // ""' < $payload)

# Get the list of active dev branches
# TODO: Improve this source param name: should be app, not project
APP_GIT_URI=$(jq -r '.source.project_git_uri // ""' < $payload)
GIT_CLONE_DIRECTORY=$TMPDIR/git-resource-repo-cache-1
/opt/resource/clone_git_repo_into_directory.sh $APP_GIT_URI $GIT_CLONE_DIRECTORY
cd $GIT_CLONE_DIRECTORY
# TODO: Test code: REMOVE! | sed '/test-/!d'
ACTIVE_DEV_BRANCHES=$(git branch -r --no-merged | sed "s/origin\///" | sed '/test-/!d' | xargs)

# Log in to concourse
CONCOURSE_TARGET=savannah
/opt/resource/log_in_to_concourse.sh $CONCOURSE_TARGET $payload

# Create the pipeline for the active dev branches
# TODO: Improve this source param name: should be app, not project
ORIGINAL_PIPELINE_NAME=$(jq -r '.source.project_pipeline // ""' < $payload)
# TODO: This needs to be a parameter
TEMPLATE_TOKEN=unmerged-branches-template
LOCAL_OR_CONCOURSE=CONCOURSE

/opt/resource/set_dev_branches_pipeline.sh \
    $CONCOURSE_TARGET \
    $ORIGINAL_PIPELINE_NAME \
    $LOCAL_OR_CONCOURSE \
    $TEMPLATE_TOKEN \
    $ACTIVE_DEV_BRANCHES

jq -n "{
  version: {ref: $(echo $new_branch_list | jq -R .)}
}" >&3
