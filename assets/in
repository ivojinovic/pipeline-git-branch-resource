#!/bin/sh
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

destination=$1

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/git-resource-request.XXXXXX)

cat > $payload <&0

load_pubkey $payload
configure_git_ssl_verification $payload
configure_credentials $payload

#old_branch_list=$(jq -r '.version.ref // ""' < $payload)

# Get the list of active dev branches
GIT_CLONE_DIRECTORY=$TMPDIR/git-resource-repo-cache
if [ -d $GIT_CLONE_DIRECTORY ]; then
  cd $GIT_CLONE_DIRECTORY
  git fetch
  git reset --hard FETCH_HEAD
else
  PROJECT_GIT_URI=$(jq -r '.source.project_git_uri // ""' < $payload)
  git clone $PROJECT_GIT_URI $GIT_CLONE_DIRECTORY
  cd $GIT_CLONE_DIRECTORY
fi
ACTIVE_DEV_BRANCHES=$(git branch -r --no-merged | sed "s/origin\///" | xargs)

# Log in to concourse
CONCOURSE_TARGET=savannah
CONCOURSE_USERNAME=$(jq -r '.source.concourse_username // ""' < $payload)
CONCOURSE_PASSWORD=$(jq -r '.source.concourse_password // ""' < $payload)
CONCOURSE_URL=$(jq -r '.source.concourse_url // ""' < $payload)
echo -e "$CONCOURSE_USERNAME\n$CONCOURSE_PASSWORD\n" | fly -t $CONCOURSE_TARGET login --concourse-url $CONCOURSE_URL

# Create the pipeline for the active dev branches
ORIGINAL_PIPELINE_NAME=$(jq -r '.source.project_pipeline // ""' < $payload)
NEW_PIPELINE_SUFFIX=_dev
TEMPLATE_TOKEN=branches-template
TEMPLATE_GROUP=template-for_dev

/opt/resource/set_dev_branches_pipeline.sh \
    $CONCOURSE_TARGET \
    $ORIGINAL_PIPELINE_NAME \
    $NEW_PIPELINE_SUFFIX PROMPT \
    $TEMPLATE_TOKEN \
    $TEMPLATE_GROUP \
    $ACTIVE_DEV_BRANCHES

jq -n "{
  version: {ref: $(echo $new_branch_list | jq -R .)}
}" >&3
